<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algos on Notes on engineering math</title>
    <link>sprjg.github.io/categories/algos/</link>
    <description>Recent content in algos on Notes on engineering math</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Dec 2020 00:00:00 +0530</lastBuildDate>
    
	<atom:link href="sprjg.github.io/categories/algos/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Algo walkthrough: product of array except self</title>
      <link>sprjg.github.io/posts/20201212172313-algo_walkthrough_product_of_array_except_self/</link>
      <pubDate>Sat, 12 Dec 2020 00:00:00 +0530</pubDate>
      
      <guid>sprjg.github.io/posts/20201212172313-algo_walkthrough_product_of_array_except_self/</guid>
      <description>Link to the problem.
What not to do Let&amp;rsquo;s ignore the note for now.
Using division If we use division, how would we solve this problem? We could start with a single pass over the array. In this pass, we multiply all the elements and calculate complete_product. For each element e, we can now calculate \(\frac{complete-product}{e}\). This, stored in an array, is our final result.
More than O(n) What if we had no time constraints?</description>
    </item>
    
    <item>
      <title>Algo walkthrough: spiral matrix</title>
      <link>sprjg.github.io/posts/20201205201509-algo_walkthrough_spiral_matrix/</link>
      <pubDate>Sun, 06 Dec 2020 00:00:00 +0530</pubDate>
      
      <guid>sprjg.github.io/posts/20201205201509-algo_walkthrough_spiral_matrix/</guid>
      <description>The problem  Given an m x n matrix, return all elements of the matrix in spiral order. Example 1: Input: matrix = [[1,2,3],[4,5,6],[7,8,9]] Output: [1,2,3,6,9,8,7,4,5]
 Link to the problem.
Intuitions Track the spiral literally I can definitely think of at least one solution involving 4 pointers . The 4 pointers track the size of the matrix as the spiral closes inwards.
  But how to track the current location?</description>
    </item>
    
    <item>
      <title>Algo walkthrough: number of ways to decode message</title>
      <link>sprjg.github.io/posts/20201205103553-algo_walkthrough_number_of_ways_to_decode_message/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0530</pubDate>
      
      <guid>sprjg.github.io/posts/20201205103553-algo_walkthrough_number_of_ways_to_decode_message/</guid>
      <description>The problem  A message containing letters from A-Z is being encoded to numbers using the following mapping:
&amp;lsquo;A&amp;rsquo; -&amp;gt; 1
&amp;lsquo;B&amp;rsquo; -&amp;gt; 2
&amp;hellip;
&amp;lsquo;Z&amp;rsquo; -&amp;gt; 26
Given a non-empty string containing only digits, determine the total number of ways to decode it.
The answer is guaranteed to fit in a 32-bit integer. This seems to be a hint at storage of the answer rather than a hint towards the solution   Link to the problem</description>
    </item>
    
    <item>
      <title>Algo walkthrough: set matrix zeroes</title>
      <link>sprjg.github.io/posts/20201130130544-algo_walkthrough_set_matrix_zeroes/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0530</pubDate>
      
      <guid>sprjg.github.io/posts/20201130130544-algo_walkthrough_set_matrix_zeroes/</guid>
      <description>The problem Given an m x n matrix, if an element is 0, set its row and column to 0&#39;s. Link to the problem.
Hints  A straight forward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution? So this problem is more about space than time.   Intuitions It seems obvious that a single pass through the matrix would work.</description>
    </item>
    
    <item>
      <title>Algo walkthrough: course schedule</title>
      <link>sprjg.github.io/posts/20201127172735-algo_walkthrough_course_schedule/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0530</pubDate>
      
      <guid>sprjg.github.io/posts/20201127172735-algo_walkthrough_course_schedule/</guid>
      <description>The problem  There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1. Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1] Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?
 Link to the problem</description>
    </item>
    
    <item>
      <title>Algo walkthrough: number of islands</title>
      <link>sprjg.github.io/posts/20201125100541-algo_walkthrough_number_of_islands/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0530</pubDate>
      
      <guid>sprjg.github.io/posts/20201125100541-algo_walkthrough_number_of_islands/</guid>
      <description>The problem  Given an m x n 2d grid map of &amp;lsquo;1&amp;rsquo;s (land) and &amp;lsquo;0&amp;rsquo;s (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.
 Link to the problem.
Exploration The first instinct is to lower the dimension of the problem and see what that looks like.</description>
    </item>
    
    <item>
      <title>Algo walkthrough: longest sequence in unsorted array</title>
      <link>sprjg.github.io/posts/20201123210516-algo_walkthrough_longest_sequence_in_unsorted_array/</link>
      <pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>sprjg.github.io/posts/20201123210516-algo_walkthrough_longest_sequence_in_unsorted_array/</guid>
      <description>The problem We have an unsorted array. It may or may not have a sequence of numbers. We have to find the length of the longest sequence. Link to the problem.
Hints  They hint at a \(O(n)\) solution. This can be useful at a later point. They also say the length of the array can be between \(1, 10000\). This means we can a small array of size \(10\) and manually try out solutions.</description>
    </item>
    
    <item>
      <title>Algo walkthrough: swapping elements to find max score</title>
      <link>sprjg.github.io/posts/20201122105230-algo_walkthrough_swapping_elements_to_find_max_score/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>sprjg.github.io/posts/20201122105230-algo_walkthrough_swapping_elements_to_find_max_score/</guid>
      <description>Problem statement Given an array of size \(n\), the beauty of this array is defined as sum of \(abs(index-value)\) for each element. Swapping two elements of this array, what is the maximum beauty possible?
Initial setup The initial setup consists of an unsorted array. Each element has a score defined as the absolute value of the difference the element&amp;rsquo;s value and its index.
The absolute value The metric for each element gives us a sense of displacement.</description>
    </item>
    
  </channel>
</rss>