<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>graph-traversal on Notes on engineering math</title>
    <link>https://sprjg.github.io/tags/graph-traversal/</link>
    <description>Recent content in graph-traversal on Notes on engineering math</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Mar 2021 00:00:00 +0530</lastBuildDate>
    
	<atom:link href="https://sprjg.github.io/tags/graph-traversal/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Algo walkthrough: jump game</title>
      <link>https://sprjg.github.io/posts/20210313111558-algo_walkthrough_jump_game/</link>
      <pubDate>Sat, 13 Mar 2021 00:00:00 +0530</pubDate>
      
      <guid>https://sprjg.github.io/posts/20210313111558-algo_walkthrough_jump_game/</guid>
      <description>The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.
Note: There will be some test cases with a board or a word larger than constraints to test if your solution is using pruning.
Link to the problem.
Intuitions It seems like a graph traversal problem. What&amp;rsquo;s tricky is the root of the traversal i.</description>
    </item>
    
    <item>
      <title>Algo walkthrough: Word search</title>
      <link>https://sprjg.github.io/posts/20210313111558-algo_walkthrough_word_search/</link>
      <pubDate>Sat, 13 Mar 2021 00:00:00 +0530</pubDate>
      
      <guid>https://sprjg.github.io/posts/20210313111558-algo_walkthrough_word_search/</guid>
      <description>The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.
Note: There will be some test cases with a board or a word larger than constraints to test if your solution is using pruning.
Link to the problem.
Intuitions It seems like a graph traversal problem. What&amp;rsquo;s tricky is the root of the traversal i.</description>
    </item>
    
    <item>
      <title>Algo walkthrough: jump game</title>
      <link>https://sprjg.github.io/posts/20210226124708-algo_walkthrough_jump_game/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0530</pubDate>
      
      <guid>https://sprjg.github.io/posts/20210226124708-algo_walkthrough_jump_game/</guid>
      <description>Example 1:
Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:
Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
 Link to the problem
Intuitions There may be more than one path to reach the end of the array i.</description>
    </item>
    
    <item>
      <title>Algo walkthrough: pacific atlantic water flow</title>
      <link>https://sprjg.github.io/posts/20210131201122-algo_walkthrough_pacific_atlantic_water_flow/</link>
      <pubDate>Wed, 10 Feb 2021 00:00:00 +0530</pubDate>
      
      <guid>https://sprjg.github.io/posts/20210131201122-algo_walkthrough_pacific_atlantic_water_flow/</guid>
      <description>Note:
The order of returned grid coordinates does not matter. Both m and n are less than 150.
Link to the problem.
 Intuitions The question directly gives us a way to visualize the matrix: as an elevation map. Following is a matrix and the corresponding elevation map:
 ~ ~ ~ ~ ~
~ 1 2 2 3 (5) *
~ 3 2 3 (4) (4) *
~ 2 4 (5) 3 1 *</description>
    </item>
    
    <item>
      <title>Algo walkthrough: course schedule</title>
      <link>https://sprjg.github.io/posts/20201127172735-algo_walkthrough_course_schedule/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0530</pubDate>
      
      <guid>https://sprjg.github.io/posts/20201127172735-algo_walkthrough_course_schedule/</guid>
      <description>Link to the problem
First impressions It seems every course has pre-requisites. A course c would have the following pre-requisites: [c, p1], [c, p2], .... First we finish all the pre-requisites then we can finish the course c. The pre-requisites will obviously have their own pre-requisites&amp;hellip; and so on. The question says &amp;ldquo;is it possible?&amp;rdquo; which means the inputs may have a situation where this chain of pre-requisites can never be completed because everything depends on everything else i.</description>
    </item>
    
    <item>
      <title>Algo walkthrough: number of islands</title>
      <link>https://sprjg.github.io/posts/20201125100541-algo_walkthrough_number_of_islands/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0530</pubDate>
      
      <guid>https://sprjg.github.io/posts/20201125100541-algo_walkthrough_number_of_islands/</guid>
      <description>Link to the problem.
Exploration The first instinct is to lower the dimension of the problem and see what that looks like. A 1D world with stretches of land and water:
                 1 0 0 0 1 1 1 0 0 1    In this case, there are 3 islands. We can count this in a single pass of the array.</description>
    </item>
    
  </channel>
</rss>